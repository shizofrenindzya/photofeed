'use strict';

var bodyParser = require('body-parser');

var expressJwt = require('express-jwt');

var jsonwebtoken = require('jsonwebtoken');

var merge = require('merge');

var mongoose = require('mongoose');

var passport = require('passport');

var passportLocalMongoose = require('passport-local-mongoose');

function initializeExpressMiddlewares(options) {
  options = merge({
    userModelName: 'User',
    jwtExpiresIn: 7 * 24 * 60 * 60
  }, options); // See http://mongoosejs.com/docs/promises.html.

  mongoose.Promise = global.Promise; // Create an empty schema to be used by passport-local-mongoose.

  var UserSchema = new mongoose.Schema(); // Now the corresponding model will have additional methods such as
  // `createStrategy` and `serializeUser`.

  UserSchema.plugin(passportLocalMongoose); // Create a separate connection. This way clients may still use the default
  // `mongoose.connect`.

  var database = mongoose.createConnection(options.mongoUrl, {
    useCreateIndex: true,
    useNewUrlParser: true,
    useUnifiedTopology: true
  }, function (error) {
    if (error) {
      /* istanbul ignore next */
      throw error;
    }
  });
  var User = database.model(options.userModelName, UserSchema); // https://github.com/saintedlama/passport-local-mongoose#simplified-passportpassport-local-configuration.

  passport.use(User.createStrategy());
  passport.serializeUser(User.serializeUser());
  passport.deserializeUser(User.deserializeUser());
  var jsonParser = bodyParser.json(); // `jwtValidator` ensures that the token from 'Authorization' header is
  // valid and populates `request.user`.

  var jwtValidator = expressJwt({
    secret: options.jwtSecret,
    algorithms: ['HS256']
  });

  var generateToken = function generateToken(username) {
    return jsonwebtoken.sign({
      username: username
    }, options.jwtSecret, {
      expiresIn: options.jwtExpiresIn
    });
  };

  var registerRespondent = function registerRespondent(request, response) {
    User.register(new User({
      username: request.body.username
    }), request.body.password, function (error) {
      if (error) {
        response.sendStatus(400);
      } else {
        response.sendStatus(200);
      }
    });
  };

  var loginRespondent = function loginRespondent(request, response) {
    response.send(generateToken(request.body.username));
  };

  var refreshRespondent = function refreshRespondent(request, response) {
    response.send(generateToken(request.user.username));
  };

  var userValidator = function userValidator(request, response, next) {
    User.findOne({
      username: request.user.username
    }, function (error, user) {
      if (error || user === null) {
        response.sendStatus(400);
      } else {
        return next();
      }
    });
  };

  var jwtProtector = [function (request, response, next) {
    jwtValidator(request, response, function (error) {
      if (error !== undefined && error.name === 'UnauthorizedError') {
        response.sendStatus(401);
      } else {
        next(error);
      }
    });
  }, userValidator];
  return {
    registerHandler: [jsonParser, registerRespondent],
    // Note that passport-local is looking for fields named 'username' and
    // 'password' in the payload, see
    // http://www.passportjs.org/docs/username-password/#parameters.
    loginHandler: [jsonParser, passport.initialize(), passport.authenticate('local'), loginRespondent],
    refreshHandler: [jwtProtector, refreshRespondent],
    jwtProtector: jwtProtector
  };
}

module.exports = {
  Server: initializeExpressMiddlewares
};