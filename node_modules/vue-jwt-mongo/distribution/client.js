'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var merge = require('merge');

var jwtDecode = require('jwt-decode');

function installVuePlugin(Vue, options) {
  var sToMillis = function sToMillis(seconds) {
    return seconds * 1000;
  };

  var defaultOptions = {
    registerEndpoint: '/auth/register',
    loginEndpoint: '/auth/login',
    refreshEndpoint: '/auth/refresh',
    storageKey: 'jsonwebtoken',
    bearerLexem: 'Bearer '
  };
  options = merge(defaultOptions, options);

  var Token = /*#__PURE__*/function () {
    function Token() {
      _classCallCheck(this, Token);
    }

    _createClass(Token, null, [{
      key: "get",
      value: function get() {
        return localStorage.getItem(options.storageKey);
      }
    }, {
      key: "set",
      value: function set(value) {
        localStorage.setItem(options.storageKey, value);
      }
    }, {
      key: "remove",
      value: function remove() {
        localStorage.removeItem(options.storageKey);
      }
    }, {
      key: "isValid",
      value: function isValid() {
        var token = Token.get();

        if (token !== null) {
          var tokenExpMs = sToMillis(jwtDecode(token).exp);
          var nowMs = new Date().getTime();
          return tokenExpMs - nowMs > sToMillis(60);
        } else {
          return false;
        }
      }
    }]);

    return Token;
  }();

  var Auth = /*#__PURE__*/function () {
    function Auth(vueInstance) {
      _classCallCheck(this, Auth);

      this.vueInstance = vueInstance;
    }

    _createClass(Auth, [{
      key: "register",
      value: function register(username, password) {
        return this.vueInstance.$http.post(options.registerEndpoint, {
          username: username,
          password: password
        }).bind(this.vueInstance);
      }
    }, {
      key: "logIn",
      value: function logIn(username, password) {
        return this.vueInstance.$http.post(options.loginEndpoint, {
          username: username,
          password: password
        }).bind(this.vueInstance).then(function (response) {
          Token.set(response.body);
        });
      }
    }, {
      key: "refresh",
      value: function refresh() {
        return this.vueInstance.$http.post(options.refreshEndpoint, null, {
          bearer: true
        }).bind(this.vueInstance).then(function (response) {
          Token.set(response.body);
        });
      }
    }, {
      key: "logOut",
      value: function logOut() {
        Token.remove();
      }
    }, {
      key: "isLoggedIn",
      value: function isLoggedIn() {
        return Token.isValid();
      }
    }, {
      key: "getToken",
      value: function getToken() {
        return Token.get();
      }
    }]);

    return Auth;
  }();

  Object.defineProperty(Vue.prototype, '$auth', {
    get: function get() {
      return new Auth(this);
    }
  });
  Vue.http.interceptors.push(function (request, next) {
    if (request.bearer) {
      if (!Token.isValid()) {
        return next(request.respondWith(null, {
          status: 401,
          statusText: 'Cannot make an authorized request' + ' as the user is not logged in'
        }));
      } else {
        request.headers.set('Authorization', options.bearerLexem + Token.get());
        return next();
      }
    } else {
      return next();
    }
  });
}

module.exports = {
  Client: installVuePlugin
};